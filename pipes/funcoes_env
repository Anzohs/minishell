/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_commands.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: essmpt <essmpt@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/26 18:21:26 by malourei          #+#    #+#             */
/*   Updated: 2025/02/01 01:16:04 by essmpt           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

int	is_arrow(char *str, int index)
{
	if (!ft_strcmp(str, ">") || !ft_strcmp(str, ">>") || !ft_strcmp(str, "<")
		|| !ft_strcmp(str, "<<"))
		return (index);
	return (-1);
}

char	**new_args(char **strs, int index)
{
	int		i;
	char	**new_strs;

	i = 0;
	new_strs = ft_calloc(index + 1, sizeof(char *));
	if (!new_strs)
	{
		write(2, "Deu merda\n", 10);
		return (NULL);
	}
	while (i < index)
	{
		printf("ARG1[%d]: %s\n", i, strs[i]);
		new_strs[i] = ft_strdup(strs[i]);
		if (!new_strs[i])
		{
			write(2, "Deu merda2\n", 11);
			return (NULL);
		}
		i++;
	}
	new_strs[i] = NULL;
	return (new_strs);
}

char	**new_arrows(char **strs, int index)
{
	int		i;
	int		j;
	int		size;
	char	**new_strs;

	i = 0;
	size = 0;
	j = index;
	while (strs[j] != NULL)
	{
		size++;
		j++;
	}
	new_strs = ft_calloc(size + 1, sizeof(char *));
	if (!new_strs)
	{
		write(2, "Deu merda\n", 10);
		return (NULL);
	}
	while (i < size)
	{
		new_strs[i] = ft_strdup(strs[index]);
		if (!new_strs[i])
		{
			write(2, "Deu merda2\n", 11);
			return (NULL);
		}
		i++;
		index++;
	}
	new_strs[i] = NULL;
	return (new_strs);
}

void	create_arrow(t_node *node)
{
	char	**arrow;
	char	**new_arg;
	int		i;
	int		index;

	i = 0;
	if (node->entry.args[0] == NULL)
		return ;
	while (node->entry.args[i] != NULL)
	{
		if (is_arrow(node->entry.args[i], i) >= 0)
		{
			new_arg = new_args(node->entry.args, i);
			arrow = new_arrows(node->entry.args, i);
			break ;
		}
		i++;
	}
	if (node->entry.args[i] == NULL)
		return ;
	free_env(node->entry.args);
	node->entry.args = new_arg;
	node->entry.arrow = arrow;
}

void	parse_commands(t_mini *mini, t_node *commands)
{
	t_node	*m;

	m = commands;

	if (node_len(m) < 1 || !clean_command(mini) || !clean_node(commands))
		return ;
	m->entry.arrow = NULL;
	create_arrow(m);
	if (!ft_strcmp(m->entry.key, ">") || (m->entry.arrow != NULL && !ft_strcmp(m->entry.arrow[0], ">")))
		one_arrow(m);
	else if(!ft_strcmp(m->entry.key, ">>") || (m->entry.arrow != NULL && !ft_strcmp(m->entry.arrow[0], ">>")))
		two_arrow(m);
	else if(!ft_strcmp(m->entry.key, "<") || (m->entry.arrow != NULL && !ft_strcmp(commands->entry.arrow[0], "<")))
		one_arrow_reverse(m);
	else if (!ft_strcmp(m->entry.key, "<<") || (m->entry.arrow != NULL && !ft_strcmp(commands->entry.arrow[0], "<<")))
		start_here_doc(m, mini->super_env);
	else if (is_biltin(commands) && node_len(commands) == 1)
	{
		if (!ft_strcmp(m->entry.key, "cd"))
			cd_biltin();
		if (!ft_strcmp(m->entry.key, "pwd"))
			get_pwd(getcwd(NULL, 0), 0);
		if (!ft_strcmp(m->entry.key, "export"))
			get_export(mini, m);
		if (!ft_strcmp(m->entry.key, "unset"))
			get_unset(mini, m);
		if (!ft_strcmp(m->entry.key, "env"))
			get_env(mini, m);
		if (!ft_strcmp(m->entry.key, "echo"))
			get_echo(mini, m);
	}
	else
		pipex(mini, m);
}

